split(iris, virginica)
split(iris, Sepal.Length )
split(iris, Sepal.Length)
iris
split(iris, species)
split(iris, Species)
split(iris, iris$Species)
s <- split(iris, iris$Species)
lapply(s, function(x) colMeans[x[,c("Sepal.Lenght")]])
lapply(s, function(x) colMeans[x[,c("Sepal.Length")]])
lapply(s, function(x) colMeans[iris[,c("Sepal.Length")]])
lapply(s, function(iris) colMeans[iris[,c("Sepal.Length")]])
lapply(s, colMeans[iris[,c("Sepal.Length")]])
lapply(s, colMeans[s[,c("Sepal.Length")]])
lapply(s, function(x) colMeans[x[,c("Sepal.Length")]])
traceback()x =
traceback()
lapply(s, function(x) colMeans[x[,c("Sepal.Length")]])
traceback()
mapply(s, function(x) colMeans[x[,c("Sepal.Length")]])
apply(s, function(x) colMeans[x[,c("Sepal.Length")]])
lapply(s, colMeans[iris[,c("Sepal.Length")]])
lapply(s, mean)
lapply(s, Colmeans)
lapply(s, colMeans)
lapply(s, colMeans(iris[1]))
lapply(s, colMeans(s[1]))
lapply(s, colMeans(s))
lapply(s, colMeans[iris[1])
lapply(s, colMeans(iris[1])
lapply(s, colMeans(iris[1])
lapply(s, colMeans(iris[1])
lapply(s, colMeans[iris[1]))
lapply(s, colMeans[iris[1]))
lapply(s, colMeans(iris[1]))
lapply(s, mean, colMeans(iris[1]))
lapply(s, mean, na.rm=TRUE)
lapply(s, mean, remove.na=TRUE)
s
mean(s)
colMeans(s)
colMeans(iris[1])
colMeans(s[1])
colMeans(s[[1]])
colMeans(iris[1])
meantest <- mean(iris[,("Sepal.Length")], na.rm = removeNA)
meantest <- mean(iris[,("Sepal.Length")], na.rm = true)
meantest <- mean(iris[,("Sepal.Length")], na.rm = TRUE)
meantest
meantest <- mean(s[,("Sepal.Length")], na.rm = TRUE)
lapply(mean(s[,("Sepal.Length")], na.rm = TRUE))
lapply(s,mean(s[,("Sepal.Length")], na.rm = TRUE))
lapply(s, function(x), mean(s[,("Sepal.Length")], na.rm = TRUE))
lapply(s, function(x) mean(s[,("Sepal.Length")], na.rm = TRUE))
lapply(s, colMeans(iris[1]))
split(iris, Species)
split(iris, iris$Species)
lapply(split(iris, iris$Species), mean)
lapply(split(iris, iris$Species), mean, remove.na=TRUE)
lapply(split(iris, iris$Species), mean, remove.NA = TRUE)
lapply(split(iris, iris$Species), mean, na.rm = TRUE)
lapply(split(iris, iris$Species), mean, rm.na = TRUE)
lapply(split(iris, iris$Species), sum, rm.na = TRUE)
mean(split(iris, iris$Species))
mean(split(iris, iris$Species), na.rm=TRUE)
mean(s, na.rm=TRUE)
split(iris, iris$Species)
mean(s$virginica)
colMeans(s)
colMeans(iris)
colMeans(s[,Species])
colMeans(s[,"Species"])
colMeans(iris)
apply(iris, 1, mean)
rowMeans(iris[, 1:4])
apply(iris, 2, mean)
apply(iris, 2, mean, rm.na= TRUE)
apply(iris, 2, mean, na.omit)
apply(iris, 2, mean, na.rm)
apply(iris, 2, mean, na.rm=TRUE)
apply(iris, 2, mean, na.rm)
apply(iris[, 1:4], 1, mean)
iris
apply(iris[, 1:4], 2, mean)
apply(s[, 1:4], 2, mean)
apply(s, 2, mean)
apply(iris[, 1:4], 2, mean)
f <- iris$Species
split(iris,f)
lapply(split(iris,f), mean)
lapply(s, function(x) colMeans(x[,c("Sepal.length")])
lapply(s, function(x) colMeans(x[,c("Sepal.length")])
lapply(s, function(x) colMeans(x[,c("Sepal.length",Sepal.Width"")])
lapply(s, function(x) colMeans(x[,c("Sepal.length","Sepal.Width")])
dze
lapply(s, function(x) colMeans(x[,c("Sepal.length","Sepal.Width")]))
lapply(s, function(x) colMeans(x[, c("Sepal.length","Sepal.Width")]))
lapply(s, function(x) colMeans(x[,c("Sepal.length","Sepal.Width")]))
lapply(s, function(x) colMeans(x[,("Sepal.length","Sepal.Width")]))
lapply(s, function(x) colMeans(x[,c ("Sepal.length","Sepal.Width")]))
head(iris)
lapply(s, function(x) colMeans(x[,c ("Sepal.length","Sepal.Width")]))
lapply(s, function(x) colMeans(x[,iris[1]]))
lapply(s, function(x) colMeans(x[,iris("Sepal.length","Sepal.Width")]))
lapply(s, function(x) colMeans(x[,s("Sepal.length","Sepal.Width")]))
lapply(s, function(x) colMeans(x[,c(Sepal.length,"Sepal.Width")]))
lapply(s, function(x) colMeans(x[,c("Sepal.length","Sepal.Width")]))
lapply(s, function(x) colMeans(x[1]))
lapply(s, function(x) colMeans(x["Sepal.Length"]))
lapply(s, function(x) colMeans(x["Sepal.Length","Sepal.Width"]))
lapply(s, function(x) colMeans(x[,"Sepal.Length","Sepal.Width"]))
lapply(s, function(x) colMeans(x[,c("Sepal.Length","Sepal.Width")]))
lapply(s, function(x) colMeans(x[,c("Sepal.Length","Sepal.Width")]))
colMeans(iris[,c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")])
apply(iris, 1, mean)
rowMeans(iris[, 1:4])
apply(iris, 2, mean)
apply(iris[, 1:4], 1, mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
mtcars
sapply(mtcars, cyl, mean)
sapply(mtcars, mtcars$cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
209.21429 - 82.63636
debug(ls)
ls
debug(ls)
ls(3)
set.seed(1)
rpois(5, 2)
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
downloading <- function (sourcefileURL, sourcefiletype, destname){
if(!file.exists("data")){
dir.create("data")
}
if(sourcefiletype == "csv"){
destfileName <-  paste("./data/",destname,".csv",sep='')
download.file(sourcefileURL, destfile = destfileName)
dataDownloaded <- date()
DF <- read.csv(destfileName, header = TRUE)
DT <- data.table(DF)
mean(DT$pwgtp15,by=DT$SEX)
#system.time(mean(DT$pwgtp15,by=DT$SEX))
}else if(sourcefiletype == "xlsx"){
destfileName <-  paste("./data/",destname,".xlsx",sep='')
download.file(sourcefileURL, destfile = destfileName, mode="wb")
dataDownloaded <- date()
quizData2 <- read.xlsx(destfileName)
}else if(sourcefiletype == "xml"){
destfileName <-  paste("./data/",destname,".xml",sep='')
download.file(sourcefileURL, destfile = destfileName)
dataDownloaded <- date()
doc <- xmlTreeParse(destfileName, useInternal=TRUE)
rootNode <-xmlRoot(doc)
#xmlName(rootNode)
Zip <- xpathSApply(rootNode,"//zipcode",xmlValue)
a <- table(Zip)
a[names(a)==21231]
}
}
setwd("C:/Users/Paul/Desktop/Data_science/data")
downloading("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv","csv",week3question1)
downloading("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv","csv",data)
downloading("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv","csv")
setwd("C:/Users/Paul/Desktop/Data_science")
downloading("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv","csv")
downloading("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv","csv","week3question1.csv")
install.packages("data.table")
downloading("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv","csv","week3question1.csv")
library(data.table)
downloading("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv","csv","week3question1.csv")
downloading("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv","csv","week3question1.csv")
downloading <- function (sourcefileURL, sourcefiletype, destname){
if(!file.exists("data")){
dir.create("data")
}
if(sourcefiletype == "csv"){
destfileName <-  paste("./data/",destname,".csv",sep='')
download.file(sourcefileURL, destfile = destfileName)
dataDownloaded <- date()
DF <- read.csv(destfileName, header = TRUE)
DT <- data.table(DF)
DT
}else if(sourcefiletype == "xlsx"){
destfileName <-  paste("./data/",destname,".xlsx",sep='')
download.file(sourcefileURL, destfile = destfileName, mode="wb")
dataDownloaded <- date()
quizData2 <- read.xlsx(destfileName)
}else if(sourcefiletype == "xml"){
destfileName <-  paste("./data/",destname,".xml",sep='')
download.file(sourcefileURL, destfile = destfileName)
dataDownloaded <- date()
doc <- xmlTreeParse(destfileName, useInternal=TRUE)
rootNode <-xmlRoot(doc)
#xmlName(rootNode)
Zip <- xpathSApply(rootNode,"//zipcode",xmlValue)
a <- table(Zip)
a[names(a)==21231]
}
}
downloading("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv","csv","week3question1.csv")
DF <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", header = TRUE)
DT <- data.table(DF)
DT
dim(DT)
DF
dim(DF)
install.packages("dplyr")
agricultureLogical <- filter(DF, ACR=3 & AGS=6)
agricultureLogical <- filter(DF, ACR==3 & AGS==6)
str(DF)
names(DF)
library(dplyr)
agricultureLogical <- filter(DF, ACR==3 & AGS==6)
agricultureLogical
which(agricultureLogical)
View(agricultureLogical)
DF$agricultureLogical = ifelse(ACR==3 & AGS==6,TRUE,FALSE)
DF$agricultureLogical = ifelse(DF$ACR==3 & DF$AGS==6,TRUE,FALSE)
DF
which(agricultureLogical)
which(DF$agricultureLogical)
install.packages("jpeg")
library(jpeg)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg")
?download.file
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg",picture.jpeg)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg","picture.jpeg")
?readJPEG
readJPEG("picture.jpeg",native=TRUE)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg","picture.jpeg", mode="wb")
readJPEG("picture.jpeg",native=TRUE)
picture <- readJPEG("picture.jpeg",native=TRUE)
quantile(picture)
?quantile
quantile(picture, c(.30, .80, .98))
downloading <- function (sourcefileURL, sourcefiletype, destname){
if(!file.exists("data")){
dir.create("data")
}
if(sourcefiletype == "csv"){
destfileName <-  paste("./data/",destname,".csv",sep='')
download.file(sourcefileURL, destfile = destfileName)
dataDownloaded <- date()
#DF <- read.csv(destfileName, header = TRUE)
#DT <- data.table(DF)
}else if(sourcefiletype == "xlsx"){
destfileName <-  paste("./data/",destname,".xlsx",sep='')
download.file(sourcefileURL, destfile = destfileName, mode="wb")
dataDownloaded <- date()
quizData2 <- read.xlsx(destfileName)
}else if(sourcefiletype == "xml"){
destfileName <-  paste("./data/",destname,".xml",sep='')
download.file(sourcefileURL, destfile = destfileName)
dataDownloaded <- date()
doc <- xmlTreeParse(destfileName, useInternal=TRUE)
rootNode <-xmlRoot(doc)
#xmlName(rootNode)
Zip <- xpathSApply(rootNode,"//zipcode",xmlValue)
a <- table(Zip)
a[names(a)==21231]
}
}
downloading("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv","csv","GDP.csv")
GDP <- read.csv(destfileName, header = TRUE)
GDP <- read.csv(destfileName, header = TRUE)
GDP <- read.csv(destfileName, header = TRUE)
GDP <- read.csv("GDP.csv", header = TRUE)
GDP <- read.csv("/data/GDP.csv", header = TRUE)
GDP <- read.csv("data/GDP.csv", header = TRUE)
GDP <- read.csv("./data/GDP.csv", header = TRUE)
GDP <- read.csv("./data/GDP.csv", header = TRUE)
GDP <- read.csv("/data/GDP.csv", header = TRUE)
GDP <- read.csv("data/GDP.csv", header = TRUE)
GDP <- read.csv("./GDP.csv", header = TRUE)
GDP <- read.csv("GDP.csv", header = TRUE)
wd
getwd
setwd
setwd("C:/Users/Paul/Desktop/Data_science")
GDP <- read.csv(data/GDP.csv, header = TRUE)
GDP <- read.csv(/data/GDP.csv, header = TRUE)
GDP <- read.csv(./data/GDP.csv, header = TRUE)
GDP <- read.csv("./data/GDP.csv", header = TRUE)
GDP <- read.csv("GDP.csv", header = TRUE)
?read.csv
GDP <- read.csv(GDP.csv, header = TRUE)
GDP <- read.csv("GDP.csv", header = TRUE)
GDP <- read.csv("./data/GDP.csv", header = TRUE)
GDP <- read.csv("./data/gdp.csv", header = TRUE)
read.csv("./data/gdp.csv")
GDP <- read.csv("./data/gdp.csv", header = TRUE)
downloading <- function (sourcefileURL, sourcefiletype, destname){
if(!file.exists("data")){
dir.create("data")
}
if(sourcefiletype == "csv"){
destfileName <-  paste("./data/",destname,".csv",sep='')
download.file(sourcefileURL, destfile = destfileName)
dataDownloaded <- date()
DF <- read.csv(destfileName, header = TRUE)
DT <- data.table(DF)
}else if(sourcefiletype == "xlsx"){
destfileName <-  paste("./data/",destname,".xlsx",sep='')
download.file(sourcefileURL, destfile = destfileName, mode="wb")
dataDownloaded <- date()
quizData2 <- read.xlsx(destfileName)
}else if(sourcefiletype == "xml"){
destfileName <-  paste("./data/",destname,".xml",sep='')
download.file(sourcefileURL, destfile = destfileName)
dataDownloaded <- date()
doc <- xmlTreeParse(destfileName, useInternal=TRUE)
rootNode <-xmlRoot(doc)
#xmlName(rootNode)
Zip <- xpathSApply(rootNode,"//zipcode",xmlValue)
a <- table(Zip)
a[names(a)==21231]
}
}
dowloading("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv","csv","GDP")
downloading("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv","csv","GDP")
downloading <- function (sourcefileURL, sourcefiletype, destname){
if(!file.exists("data")){
dir.create("data")
}
if(sourcefiletype == "csv"){
destfileName <-  paste("./data/",destname,".csv",sep='')
download.file(sourcefileURL, destfile = destfileName)
dataDownloaded <- date()
DF <- read.csv(destfileName, header = TRUE)
DT <- data.table(DF)
DF
}else if(sourcefiletype == "xlsx"){
destfileName <-  paste("./data/",destname,".xlsx",sep='')
download.file(sourcefileURL, destfile = destfileName, mode="wb")
dataDownloaded <- date()
quizData2 <- read.xlsx(destfileName)
}else if(sourcefiletype == "xml"){
destfileName <-  paste("./data/",destname,".xml",sep='')
download.file(sourcefileURL, destfile = destfileName)
dataDownloaded <- date()
doc <- xmlTreeParse(destfileName, useInternal=TRUE)
rootNode <-xmlRoot(doc)
#xmlName(rootNode)
Zip <- xpathSApply(rootNode,"//zipcode",xmlValue)
a <- table(Zip)
a[names(a)==21231]
}
}
downloading("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv","csv","GDP")
GDP <- read.csv("./data/GDP.csv", header=TRUE)
dim GDP
dim (GDP)
View(GDP)
downloading("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv","csv","edu")
edu <- read.csv("./data/edu.csv", header=TRUE)
edu
names(edu)
names(GDP)
View(edu)
mergedData <- merge(GDP, edu, by.x="X", by.y="CountryCode", all=TRUE)
View(mergedData)
mergedData <- merge(GDP, edu, by.x="X", by.y="CountryCode")
?merge
View(GDP)
GDP <- GDP[(1:194),]
gdp
GDP
View(GDP)
mergedData <- merge(GDP, edu, by.x="X", by.y="CountryCode")
View(mergedData)
sortedmergedData <- arrange(mergedData, desc(Gross.domestic.product.2012))
View(sortedmergedData)
View(GDP)
GDP
View(GDP)
GDP$rank = ifelse(Gross.domestic.product.2012 ==is.na, NA, Gross.domestic.product.2012*1)
GDP$rank = ifelse(GDP£Gross.domestic.product.2012 ==is.na, NA, Gross.domestic.product.2012*1)
GDP$rank = ifelse(GDP$Gross.domestic.product.2012 ==is.na, NA, Gross.domestic.product.2012*1)
GDP$rank = ifelse(GDP$Gross.domestic.product.2012 =is.na, NA, Gross.domestic.product.2012*1)
GDP$rank = ifelse(GDP$Gross.domestic.product.2012 >0, Gross.domestic.product.2012*1, NA)
GDP$rank = ifelse(GDP$Gross.domestic.product.2012>0, Gross.domestic.product.2012*1, NA)
str(GDP)
GDP$rank = as.numeric(GDP$Gross.domestic.product.2012)
View(GDP)
?mutate
sortedmergedData <- group_by(mergedData,Gross.domestic.product.2012)
View(sortedmergedData)
View(GDP)
GDP$rank = levels(GDP$Gross.domestic.product.2012)
GDP$rank2 = levels(GDP$Gross.domestic.product.2012)
GDP$rank = as.numeric(levels(GDP$Gross.domestic.product.2012))[GDP$Gross.domestic.product.2012])
GDP$rank = as.numeric(levels(GDP$Gross.domestic.product.2012))[GDP$Gross.domestic.product.2012]
View(GDP)
mergedData <- merge(GDP, edu, by.x="X", by.y="CountryCode")
View(sortedmergedData)
View(mergedData)
sortedmergedData <- arrange(mergedData, desc(rank))
View(sortedmergedData)
str(sortedmergedData)
tapply(mergedData$rank, mergedData$Income.Group,average)
tapply(mergedData$rank, mergedData$Income.Group,mean)
?quantile
View(sortedmergedData)
?count
sortedmergedData$question5 = ifelse(sortedmergedData, rank < 39 & Income.Group = "Lower middle income", TRUE, FALSE)
sortedmergedData$question5 = ifelse(sortedmergedData, rank < 39 & Income.Group == "Lower middle income", TRUE, FALSE)
levels(Income.Group)
levels(sortedmergedData$Income.Group)
sortedmergedData$question5 = ifelse(sortedmergedData, rank < 39 & Income.Group ==5, TRUE, FALSE)
sortedmergedData$question5 = ifelse(sortedmergedData, sortedmergedDat$rank < 39 & sortedmergedDat$Income.Group ==5, TRUE, FALSE)
sortedmergedData$question5 = ifelse(sortedmergedData, sortedmergedDat$rank < 39 & sortedmergedDat$Income.Group =5, TRUE, FALSE)
sortedmergedData$question5 = ifelse(sortedmergedData, sortedmergedData$rank < 39 & sortedmergedData$Income.Group ==5, TRUE, FALSE)
sortedmergedData$question5 = ifelse(sortedmergedData, rank<39 & Income.Group ==5, TRUE, FALSE)
sortedmergedData$question5 = ifelse(sortedmergedData, rank<39 & Income.Group =="5", TRUE, FALSE)
sortedmergedData$question5 = ifelse(sortedmergedData, rank<39 & Income.Group =="5", TRUE)
mergedData$groupRank = cut2(mergedData$rank, g=5)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
mergedData$groupRank = cut2(mergedData$rank, g=5)
View(mergedData)
table(groupRank)
table(mergedData$groupRank)
table(mergedData$groupRank, mergedData$rank)
table(mergedData$groupRank, mergedData$Income.Group)
swirl()
library(swirl)
ls()
rm(list=ls())
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -x:time)
select(cran, -X:time)
select(cran, -X:-time)
-5:20
-(5:20)
select(cran, -(X:time)
select(cran, -(X:time))
select(cran, -(X:time))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1",
| country == "US")
filter(cran, r_version == "3.1.1" | country == "US")
filter(cran, r_version == "3.1.1",country == "US")
?Comparison
filter(cran, r_version <= "3.0.2",country == "IN")
filter(cran, country == "US" |
| country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, r_os == "linux-gnu", size > 100500)
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package,
| ip_id)
arrange(cran2, package, ip_id)
arrange(cran2, country, r_version, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran,ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size), by=TRUE)
?summarize
summarise(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
info()
skip()
swirl()resume.class =
swirl()
summarize(cran, avg_bytes = mean(size))
skip()
