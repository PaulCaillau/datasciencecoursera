## rate
}
rankall("heart attack", 20)
rankall <- function(outcome, num) {
## Read outcome data
file <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available", stringsAsFactors=FALSE)
r <- nrow(file)
outcomes <- c("heart attack", "heart failure","pneumonia")
colOutcomes <-c(11,17,23)
m <- rbind(outcomes, colOutcomes)
statecode = c(state.abb)
mat <- matrix(, nrow = 0, ncol = 3)
## Check that state and outcome are valid
if(is.element(statecode, file[,7])==TRUE && is.element(outcome, outcomes)==TRUE){
print ("valid arguments")
##I NEED O FILTER BY STATE !
indexcol <- as.numeric(m[2,which(outcomes==outcome)])
Hopital = file[,2]
code = file[,7]
rate = file[,indexcol]
my_data = cbind(Hopital, code, rate)
##ADD a loop aver statecode
for (i in 1:50) {
statecode = state.abb[i]
my_data2 <- my_data[which(my_data[,2] == statecode),]
nmax = nrow(my_data2)
## Return hospital name in that state with lowest 30-day death
x <- my_data2[order(as.numeric(my_data2[,3]),my_data2[,1],decreasing=FALSE),]
## Special cases for worst and best
if(num <= nmax) {
line <- x[num,]
}else{
line <- c("num too big", "num too big", statecode)
}
mat <- rbind(mat, line)
}
mat
}else if(is.element(outcome, outcomes)==FALSE && is.element(state, file[,7])==TRUE){
stop('invalid outcomes')
}else if(is.element(state, file[,7])==FALSE && is.element(outcome, outcomes)==TRUE){
stop('invalid state')
}else if(is.element(state, file[,7])==FALSE && is.element(outcome, outcomes)==FALSE){
stop('invalid arguments')
}
## rate
}
rankall("heart attack", 20)
rankall <- function(outcome, num) {
## Read outcome data
file <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available", stringsAsFactors=FALSE)
r <- nrow(file)
outcomes <- c("heart attack", "heart failure","pneumonia")
colOutcomes <-c(11,17,23)
m <- rbind(outcomes, colOutcomes)
statecode = c(state.abb)
mat <- matrix(, nrow = 0, ncol = 3)
## Check that state and outcome are valid
if(is.element(statecode, file[,7])==TRUE && is.element(outcome, outcomes)==TRUE){
print ("valid arguments")
##I NEED O FILTER BY STATE !
indexcol <- as.numeric(m[2,which(outcomes==outcome)])
Hopital = file[,2]
code = file[,7]
rate = file[,indexcol]
my_data = cbind(Hopital, code, rate)
##ADD a loop aver statecode
for (i in 1:50) {
statecode = state.abb[i]
my_data2 <- my_data[which(my_data[,2] == statecode),]
nmax = nrow(my_data2)
## Return hospital name in that state with lowest 30-day death
x <- my_data2[order(as.numeric(my_data2[,3]),my_data2[,1],decreasing=FALSE),]
## Special cases for worst and best
if(num <= nmax) {
line <- x[num,]
}else{
line <- c("<NA>", statecode, "<NA>" )
}
mat <- rbind(mat, line)
}
mat
}else if(is.element(outcome, outcomes)==FALSE && is.element(state, file[,7])==TRUE){
stop('invalid outcomes')
}else if(is.element(state, file[,7])==FALSE && is.element(outcome, outcomes)==TRUE){
stop('invalid state')
}else if(is.element(state, file[,7])==FALSE && is.element(outcome, outcomes)==FALSE){
stop('invalid arguments')
}
## rate
}
rankall("heart attack", 20)
head(rankall("heart attack", 20),10)
state.abb
rankall <- function(outcome, num) {
## Read outcome data
file <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available", stringsAsFactors=FALSE)
r <- nrow(file)
outcomes <- c("heart attack", "heart failure","pneumonia")
colOutcomes <-c(11,17,23)
m <- rbind(outcomes, colOutcomes)
statecode = c(state.abb)
mat <- matrix(, nrow = 0, ncol = 3)
## Check that state and outcome are valid
if(is.element(statecode, file[,7])==TRUE && is.element(outcome, outcomes)==TRUE){
print ("valid arguments")
##I NEED O FILTER BY STATE !
indexcol <- as.numeric(m[2,which(outcomes==outcome)])
Hopital = file[,2]
code = file[,7]
rate = file[,indexcol]
my_data = cbind(Hopital, code, rate)
##ADD a loop aver statecode
for (i in 1:50) {
statecode = state.abb[i]
my_data2 <- my_data[which(my_data[,2] == statecode),]
nmax = nrow(my_data2)
## Return hospital name in that state with lowest 30-day death
x <- my_data2[order(as.numeric(my_data2[,3]),my_data2[,1],decreasing=FALSE),]
## Special cases for worst and best
if(num <= nmax) {
line <- x[num,]
}else{
line <- c("<NA>", statecode, "<NA>" )
}
mat <- rbind(mat, line)
}
matordered <- mat[order((mat[,2]),decreasing=FALSE),]
matordered
}else if(is.element(outcome, outcomes)==FALSE && is.element(state, file[,7])==TRUE){
stop('invalid outcomes')
}else if(is.element(state, file[,7])==FALSE && is.element(outcome, outcomes)==TRUE){
stop('invalid state')
}else if(is.element(state, file[,7])==FALSE && is.element(outcome, outcomes)==FALSE){
stop('invalid arguments')
}
## rate
}
head(rankall("heart attack", 20),10)
rankall <- function(outcome, num) {
## Read outcome data
file <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available", stringsAsFactors=FALSE)
r <- nrow(file)
outcomes <- c("heart attack", "heart failure","pneumonia")
colOutcomes <-c(11,17,23)
m <- rbind(outcomes, colOutcomes)
statecode = c(state.abb)
mat <- matrix(, nrow = 0, ncol = 3)
## Check that state and outcome are valid
if(is.element(statecode, file[,7])==TRUE && is.element(outcome, outcomes)==TRUE){
print ("valid arguments")
##I NEED O FILTER BY STATE !
indexcol <- as.numeric(m[2,which(outcomes==outcome)])
Hopital = file[,2]
code = file[,7]
rate = file[,indexcol]
my_data = cbind(Hopital, code, rate)
##ADD a loop aver statecode
for (i in 1:50) {
statecode = state.abb[i]
my_data2 <- my_data[which(my_data[,2] == statecode),]
nmax = nrow(my_data2)
## Return hospital name in that state with lowest 30-day death
x <- my_data2[order(as.numeric(my_data2[,3]),my_data2[,1],decreasing=FALSE),]
## Special cases for worst and best
if(num <= nmax) {
line <- x[num,]
}else if(num == "best"){
line <- head(x)
}else if (num =="worst"){
tail(x)
}else{
line <- c("<NA>", statecode, "<NA>" )
}
mat <- rbind(mat, line)
}
matordered <- mat[order((mat[,2]),decreasing=FALSE),]
matordered
}else if(is.element(outcome, outcomes)==FALSE && is.element(state, file[,7])==TRUE){
stop('invalid outcomes')
}else if(is.element(state, file[,7])==FALSE && is.element(outcome, outcomes)==TRUE){
stop('invalid state')
}else if(is.element(state, file[,7])==FALSE && is.element(outcome, outcomes)==FALSE){
stop('invalid arguments')
}
## rate
}
head(rankall("heart attack", 20),10)
tail(rankall("pneumonia", "worst"),3)
rankall <- function(outcome, num) {
## Read outcome data
file <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available", stringsAsFactors=FALSE)
r <- nrow(file)
outcomes <- c("heart attack", "heart failure","pneumonia")
colOutcomes <-c(11,17,23)
m <- rbind(outcomes, colOutcomes)
statecode = c(state.abb)
mat <- matrix(, nrow = 0, ncol = 3)
## Check that state and outcome are valid
if(is.element(statecode, file[,7])==TRUE && is.element(outcome, outcomes)==TRUE){
print ("valid arguments")
##I NEED O FILTER BY STATE !
indexcol <- as.numeric(m[2,which(outcomes==outcome)])
Hopital = file[,2]
code = file[,7]
rate = file[,indexcol]
my_data = cbind(Hopital, code, rate)
##ADD a loop aver statecode
for (i in 1:50) {
statecode = state.abb[i]
my_data2 <- my_data[which(my_data[,2] == statecode),]
nmax = nrow(my_data2)
## Return hospital name in that state with lowest 30-day death
x <- my_data2[order(as.numeric(my_data2[,3]),my_data2[,1],decreasing=FALSE),]
## Special cases for worst and best
if(num <= nmax) {
line <- x[num,]
}else if(num == "best"){
line <- x[1,]
}else if (num =="worst"){
line <- x[nmax,]
}else{
line <- c("<NA>", statecode, "<NA>" )
}
mat <- rbind(mat, line)
}
matordered <- mat[order((mat[,2]),decreasing=FALSE),]
matordered
}else if(is.element(outcome, outcomes)==FALSE && is.element(state, file[,7])==TRUE){
stop('invalid outcomes')
}else if(is.element(state, file[,7])==FALSE && is.element(outcome, outcomes)==TRUE){
stop('invalid state')
}else if(is.element(state, file[,7])==FALSE && is.element(outcome, outcomes)==FALSE){
stop('invalid arguments')
}
## rate
}
tail(rankall("pneumonia", "worst"),3)
rankall <- function(outcome, num) {
## Read outcome data
file <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available", stringsAsFactors=FALSE)
r <- nrow(file)
outcomes <- c("heart attack", "heart failure","pneumonia")
colOutcomes <-c(11,17,23)
m <- rbind(outcomes, colOutcomes)
statecode = c(state.abb)
mat <- matrix(, nrow = 0, ncol = 3)
## Check that state and outcome are valid
if(is.element(statecode, file[,7])==TRUE && is.element(outcome, outcomes)==TRUE){
print ("valid arguments")
##I NEED O FILTER BY STATE !
indexcol <- as.numeric(m[2,which(outcomes==outcome)])
Hopital = file[,2]
code = file[,7]
rate = file[,indexcol]
my_data = cbind(Hopital, code, rate)
##ADD a loop aver statecode
for (i in 1:50) {
statecode = state.abb[i]
my_data2 <- my_data[which(my_data[,2] == statecode),]
nmax = nrow(my_data2)
## Return hospital name in that state with lowest 30-day death
x <- my_data2[order(as.numeric(my_data2[,3]),my_data2[,1],decreasing=FALSE),]
## Special cases for worst and best
if(num <= nmax) {
line <- x[num,]
}else if(num == "best"){
lowestrate <- (min(as.numeric(my_data2[,3]), na.rm=TRUE))
line <- my_data2[which(my_data2[,3]==lowestrate),]
}else if (num =="worst"){
biggestrate <- (max(as.numeric(my_data2[,3]), na.rm=TRUE))
line <- my_data2[which(my_data2[,3]==biggesttrate),]
}else{
line <- c("<NA>", statecode, "<NA>" )
}
mat <- rbind(mat, line)
}
matordered <- mat[order((mat[,2]),decreasing=FALSE),]
matordered
}else if(is.element(outcome, outcomes)==FALSE && is.element(state, file[,7])==TRUE){
stop('invalid outcomes')
}else if(is.element(state, file[,7])==FALSE && is.element(outcome, outcomes)==TRUE){
stop('invalid state')
}else if(is.element(state, file[,7])==FALSE && is.element(outcome, outcomes)==FALSE){
stop('invalid arguments')
}
## rate
}
tail(rankall("pneumonia", "worst"),3)
rankall <- function(outcome, num) {
## Read outcome data
file <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available", stringsAsFactors=FALSE)
r <- nrow(file)
outcomes <- c("heart attack", "heart failure","pneumonia")
colOutcomes <-c(11,17,23)
m <- rbind(outcomes, colOutcomes)
statecode = c(state.abb)
mat <- matrix(, nrow = 0, ncol = 3)
## Check that state and outcome are valid
if(is.element(statecode, file[,7])==TRUE && is.element(outcome, outcomes)==TRUE){
print ("valid arguments")
##I NEED O FILTER BY STATE !
indexcol <- as.numeric(m[2,which(outcomes==outcome)])
Hopital = file[,2]
code = file[,7]
rate = file[,indexcol]
my_data = cbind(Hopital, code, rate)
##ADD a loop aver statecode
for (i in 1:50) {
statecode = state.abb[i]
my_data2 <- my_data[which(my_data[,2] == statecode),]
nmax = nrow(my_data2)
## Return hospital name in that state with lowest 30-day death
x <- my_data2[order(as.numeric(my_data2[,3]),my_data2[,1],decreasing=FALSE),]
## Special cases for worst and best
if(num <= nmax) {
line <- x[num,]
}else if(num == "best"){
lowestrate <- (min(as.numeric(my_data2[,3]), na.rm=TRUE))
line <- my_data2[which(my_data2[,3]==lowestrate),]
}else if (num =="worst"){
biggestrate <- (max(as.numeric(my_data2[,3]), na.rm=TRUE))
line <- my_data2[which(my_data2[,3]==biggestrate),]
}else{
line <- c("<NA>", statecode, "<NA>" )
}
mat <- rbind(mat, line)
}
matordered <- mat[order((mat[,2]),decreasing=FALSE),]
matordered
}else if(is.element(outcome, outcomes)==FALSE && is.element(state, file[,7])==TRUE){
stop('invalid outcomes')
}else if(is.element(state, file[,7])==FALSE && is.element(outcome, outcomes)==TRUE){
stop('invalid state')
}else if(is.element(state, file[,7])==FALSE && is.element(outcome, outcomes)==FALSE){
stop('invalid arguments')
}
## rate
}
tail(rankall("pneumonia", "worst"),3)
tail(rankall("heart failure", "worst"),10)
tail(rankall("heart failure"),10)
tail(rankall("heart failure","best"),10)
best <- function(statecode, outcome) {
## Read outcome data
file <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available", stringsAsFactors=FALSE)
r <- nrow(file)
outcomes <- c("heart attack", "heart failure","pneumonia")
colOutcomes <-c(11,17,23)
m <- rbind(outcomes, colOutcomes)
## Check that state and outcome are valid
if(is.element(statecode, file[,7])==TRUE && is.element(outcome, outcomes)==TRUE){
print ("valid arguments")
##I NEED O FILTER BY STATE !
indexcol <- as.numeric(m[2,which(outcomes==outcome)])
Hopital = file[,2]
code = file[,7]
rate = file[,indexcol]
my_data = cbind(Hopital, code, rate)
my_data2 <- my_data[which(my_data[,2] == statecode),]
## Return hospital name in that state with lowest 30-day death
lowestrate <- (min(as.numeric(my_data2[,3]), na.rm=TRUE))
lowestindex <- which(my_data2[,3]==lowestrate)
my_data2[which(my_data2[,3]==lowestrate),]
}else if(is.element(outcome, outcomes)==FALSE && is.element(state, file[,7])==TRUE){
stop('invalid outcomes')
}else if(is.element(state, file[,7])==FALSE && is.element(outcome, outcomes)==TRUE){
stop('invalid state')
}else if(is.element(state, file[,7])==FALSE && is.element(outcome, outcomes)==FALSE){
stop('invalid arguments')
}
## rate
}
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankHospital <- function(statecode, outcome, num) {
## Read outcome data
file <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available", stringsAsFactors=FALSE)
r <- nrow(file)
outcomes <- c("heart attack", "heart failure","pneumonia")
colOutcomes <-c(11,17,23)
m <- rbind(outcomes, colOutcomes)
## Check that state and outcome are valid
if(is.element(statecode, file[,7])==TRUE && is.element(outcome, outcomes)==TRUE){
print ("valid arguments")
##I NEED O FILTER BY STATE !
indexcol <- as.numeric(m[2,which(outcomes==outcome)])
Hopital = file[,2]
code = file[,7]
rate = file[,indexcol]
my_data = cbind(Hopital, code, rate)
my_data2 <- my_data[which(my_data[,2] == statecode),]
nmax = nrow(my_data2)
## Return hospital name in that state with lowest 30-day death
x <- my_data2[order(as.numeric(my_data2[,3]),my_data2[,1],decreasing=FALSE),]
x
## Special cases for worst and best
if(num == "best"){
head(x)
}else if (num =="worst"){
tail(x)
}else if (num <= nmax) {
x[num,]
}else{
print("NA")
}
}else if(is.element(outcome, outcomes)==FALSE && is.element(state, file[,7])==TRUE){
stop('invalid outcomes')
}else if(is.element(state, file[,7])==FALSE && is.element(outcome, outcomes)==TRUE){
stop('invalid state')
}else if(is.element(state, file[,7])==FALSE && is.element(outcome, outcomes)==FALSE){
stop('invalid arguments')
}
## rate
}
rankhospital("NC", "heart attack", "worst")
rankHospital("NC", "heart attack", "worst")
rankHospital <- function(statecode, outcome, num) {
## Read outcome data
file <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available", stringsAsFactors=FALSE)
r <- nrow(file)
outcomes <- c("heart attack", "heart failure","pneumonia")
colOutcomes <-c(11,17,23)
m <- rbind(outcomes, colOutcomes)
## Check that state and outcome are valid
if(is.element(statecode, file[,7])==TRUE && is.element(outcome, outcomes)==TRUE){
print ("valid arguments")
##I NEED O FILTER BY STATE !
indexcol <- as.numeric(m[2,which(outcomes==outcome)])
Hopital = file[,2]
code = file[,7]
rate = file[,indexcol]
my_data = cbind(Hopital, code, rate)
my_data2 <- my_data[which(my_data[,2] == statecode),]
nmax = nrow(my_data2)
## Return hospital name in that state with lowest 30-day death
x <- my_data2[order(as.numeric(my_data2[,3]),my_data2[,1],decreasing=FALSE),]
x
## Special cases for worst and best
if(num == "best"){
lowestrate <- (min(as.numeric(my_data2[,3]), na.rm=TRUE))
my_data2[which(my_data2[,3]==lowestrate),]
}else if (num =="worst"){
biggestrate <- (max(as.numeric(my_data2[,3]), na.rm=TRUE))
my_data2[which(my_data2[,3]==biggestrate),]
}else if (num <= nmax) {
x[num,]
}else{
print("NA")
}
}else if(is.element(outcome, outcomes)==FALSE && is.element(state, file[,7])==TRUE){
stop('invalid outcomes')
}else if(is.element(state, file[,7])==FALSE && is.element(outcome, outcomes)==TRUE){
stop('invalid state')
}else if(is.element(state, file[,7])==FALSE && is.element(outcome, outcomes)==FALSE){
stop('invalid arguments')
}
## rate
}
rankHospital("NC", "heart attack", "worst")
rankhospital <- function(statecode, outcome, num) {
## Read outcome data
file <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available", stringsAsFactors=FALSE)
r <- nrow(file)
outcomes <- c("heart attack", "heart failure","pneumonia")
colOutcomes <-c(11,17,23)
m <- rbind(outcomes, colOutcomes)
## Check that state and outcome are valid
if(is.element(statecode, file[,7])==TRUE && is.element(outcome, outcomes)==TRUE){
print ("valid arguments")
##I NEED O FILTER BY STATE !
indexcol <- as.numeric(m[2,which(outcomes==outcome)])
Hopital = file[,2]
code = file[,7]
rate = file[,indexcol]
my_data = cbind(Hopital, code, rate)
my_data2 <- my_data[which(my_data[,2] == statecode),]
nmax = nrow(my_data2)
## Return hospital name in that state with lowest 30-day death
x <- my_data2[order(as.numeric(my_data2[,3]),my_data2[,1],decreasing=FALSE),]
x
## Special cases for worst and best
if(num == "best"){
lowestrate <- (min(as.numeric(my_data2[,3]), na.rm=TRUE))
my_data2[which(my_data2[,3]==lowestrate),]
}else if (num =="worst"){
biggestrate <- (max(as.numeric(my_data2[,3]), na.rm=TRUE))
my_data2[which(my_data2[,3]==biggestrate),]
}else if (num <= nmax) {
x[num,]
}else{
print("NA")
}
}else if(is.element(outcome, outcomes)==FALSE && is.element(state, file[,7])==TRUE){
stop('invalid outcomes')
}else if(is.element(state, file[,7])==FALSE && is.element(outcome, outcomes)==TRUE){
stop('invalid state')
}else if(is.element(state, file[,7])==FALSE && is.element(outcome, outcomes)==FALSE){
stop('invalid arguments')
}
## rate
}
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("heart attack", 4)
as.character(subset(r, statecode == "HI")$hospital)
rankall("heart attack", 4)
rankall("pneumonia", "worst")
rankall("heart failure", 10)
